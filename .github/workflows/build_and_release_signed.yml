name: Build and Release

on:
 push:
   branches:
     - master
   tags:
     - "v*"

jobs:
 apk:
   name: Generate APK
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v3
     - name: Bump version
       uses: chkfung/android-version-actions@v1.2.1
       with:
         gradlePath: app/build.gradle # or app/build.gradle.kts 
         versionCode: ${{github.run_number}}
     - name: Setup JDK
       uses: actions/setup-java@v3
       with:
         distribution: temurin
         java-version: "11"
     - name: Set execution flag for gradlew
       run: chmod +x gradlew
     - name: Build APK
       run: bash ./gradlew assembleRelease --stacktrace
     - name: Get Application Name
       run: |
            appName=`grep " applicationId" app/build.gradle | cut -d'"' -f2 | cut -d'.' -f4`
            export APP_NAME=$appName
            echo "APP_NAME=$appName" >> $GITHUB_ENV
       id: android_app_name
     - name: Get Version Name
       run: |
            versionName=`grep " versionName" app/build.gradle | cut -d'"' -f2`
            export VERSION_NAME=$versionName
            echo "VERSION_NAME=$versionName" >> $GITHUB_ENV
       id: android_version_name
     - name: Get Version Code
       run: |
            versionCode=`grep " versionCode" app/build.gradle | awk '{ print $2; }'`
            export VERSION_CODE=$versionCode
            echo "VERSION_CODE=$versionCode" >> $GITHUB_ENV
       id: android_version_code
     - name: Find APK
       run: |
            apkPath=`find . -name "*.apk" -type f`
            export APK_PATH=$apkPath
            echo "APK_PATH=$apkPath" >> $GITHUB_ENV
       id: find_apk_path
     - name: Sign APK
       id: sign_apk
       uses: r0adkll/sign-android-release@v1
       with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNINGKEYBASE64 }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTOREPASSWORD }}
          keyPassword: ${{ secrets.KEYPASSWORD }}
     - name: Upload APK
       uses: actions/upload-artifact@v1
       with:
         name: apk
         path: ${{ env.APK_PATH }}

 release:
   name: Release APK
   needs: apk
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v3
     - name: Bump version
       uses: chkfung/android-version-actions@v1.2.1
       with:
         gradlePath: app/build.gradle # or app/build.gradle.kts 
         versionCode: ${{github.run_number}}
     - name: Get Application Name
       run: |
            appName=`grep " applicationId" app/build.gradle | cut -d'"' -f2 | cut -d'.' -f4`
            export APP_NAME=$appName
            echo "APP_NAME=$appName" >> $GITHUB_ENV
       id: android_app_name
     - name: Get Version Name
       run: |
            versionName=`grep " versionName" app/build.gradle | cut -d'"' -f2`
            export VERSION_NAME=$versionName
            echo "VERSION_NAME=$versionName" >> $GITHUB_ENV
       id: android_version_name
     - name: Get Version Code
       run: |
            versionCode=`grep " versionCode" app/build.gradle | awk '{ print $2; }'`
            export VERSION_CODE=$versionCode
            echo "VERSION_CODE=$versionCode" >> $GITHUB_ENV
       id: android_version_code
     - name: Download APK from build
       uses: actions/download-artifact@v1
       with:
         name: apk
     - name: Find APK
       run: |
            apkPath=`find . -name "*.apk" -type f`
            export APK_PATH=$apkPath
            echo "APK_PATH=$apkPath" >> $GITHUB_ENV
       id: find_apk_path
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: v${{ env.VERSION_NAME }}.${{ env.VERSION_CODE }}
         release_name: ${{ env.APP_NAME }} ${{ env.VERSION_NAME }}.${{ env.VERSION_CODE }}
     - name: Upload Release APK
       id: upload_release_asset
       uses: actions/upload-release-asset@v1.0.1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: ${{ env.APK_PATH }}
         asset_name: ${{ env.APP_NAME }}-${{ env.VERSION_NAME }}.${{ env.VERSION_CODE }}-release.apk
         asset_content_type: application/zip
     - name: "Fetching Repository Contents"
       id: fetching_repo_content
       uses: actions/checkout@main
     - name: Bump version
       uses: chkfung/android-version-actions@v1.2.1
       with:
         gradlePath: app/build.gradle # or app/build.gradle.kts 
         versionCode: ${{github.run_number}}
     - name: Update versions
       id: update_versions
       run: |
          echo ${{ env.VERSION_NAME }}.${{ env.VERSION_CODE }} > latest.version
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add latest.version
          git commit -am "Latest version and versionCode updated"
          git push
     - name: Create Changelog body
       run: |
            changelogBody=`![screenshot](https://user-images.githubusercontent.com/65389254/184656446-277635ca-45e2-45fc-bd12-0e29dce90e20.png)\![screenshot2](https://user-images.githubusercontent.com/65389254/184656451-2aced69a-d175-4e99-a435-34256d6837e9.png)\![screenshot3](https://user-images.githubusercontent.com/65389254/184656456-f571d00f-cc8a-45e2-8917-df67f81dc7ce.png)`
            export CHANGELOG_BODY=$changelogBody
            echo "CHANGELOG_BODY=$changelogBody" >> $GITHUB_ENV

     - name: Update Changelog
       uses: stefanzweifel/changelog-updater-action@v1
       with:
         release-notes: ${{ env.CHANGELOG_BODY }}
         latest-version: ${{ github.event.release.name }}

     - name: Commit updated CHANGELOG
       uses: stefanzweifel/git-auto-commit-action@v4
       with:
         branch: main
         commit_message: Update CHANGELOG
         file_pattern: CHANGELOG.md
